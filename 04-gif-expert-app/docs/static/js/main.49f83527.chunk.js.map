{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","handleInputChage","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAsCeA,EAnCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAkBrC,OACI,mCACI,sBAAMC,SAZO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAAW,SAACP,GAAD,OApBF,SAACA,GACtBF,EAAcE,EAAEQ,OAAOF,OAmBOG,CAAiBT,W,+BC3B1CU,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAErC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCsBDO,EAzBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDJ,SAACA,GAAc,IAAD,EAEZf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsBtC,OAZAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBf,KAAMkB,EACNL,SAAS,SAMlB,CAAEpB,IAEEqB,EDnB2BK,CAAa1B,GAAjCa,EAFc,EAEpBN,KAAca,EAFM,EAENA,QAGtB,OACI,qCACI,6BAAMpB,IAGJoB,GAAW,wCAEb,qBAAKJ,UAAU,YAAf,SAIYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAAgCA,GAAbA,EAAIC,aEjBtCgB,EAAe,WAAO,IAAD,EAEI1C,mBAAS,CAAC,YAAa,YAAa,gBAFxC,mBAEzB2C,EAFyB,KAEb5C,EAFa,KAQhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAI5B,6BAEI4C,EAAWnB,KAAI,SAACT,EAAU6B,GAAX,OACb,cAAC,EAAD,CAA0B7B,SAAUA,GAArBA,Y,MChB3B8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.49f83527.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setcategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChage = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setcategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={ handleSubmit }>\r\n                <input \r\n                    type=\"text\" \r\n                    value={ inputValue } \r\n                    onChange={ (e) => handleInputChage(e)}\r\n                /> \r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=jFWpRVGq3soOSSyneMUWPpcMc8ZuCUPI`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    \r\n   return (\r\n       <div className=\"card\">\r\n           <img src={url} alt={title} />\r\n           <p>{ title }</p>\r\n       </div>\r\n   );\r\n}\r\n\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n    \r\n    const { data: images, loading } = useFetchGifs(category);\r\n    // const [count, setCount] = useState(0);\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n\r\n            {/* forma de mostrar loading con un if sin ser ternario */}\r\n            { loading && <p>Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {/* <h3>{ count }</h3>\r\n                <button onClick={ () => setCount(count + 1)}></button> */}\r\n                    { \r\n                        images.map( img => (\r\n                            <GifGridItem key={ img.id } {...img}/>\r\n                        )) \r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    //useEffect es muy util porque cuando utilizamos setCount por ejemplo\r\n    //react ejecuta de nuevo todo el codigo del componente por lo cual podemos \r\n    //machacar valores que no queremos\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then(imgs => setState({\r\n                data: imgs,\r\n                loading: false\r\n            }));\r\n        //en el array señalamos las dependecias/logica por la cual\r\n        //debe de ejecutarse getGifs\r\n        //es decir sin dependencias getGifs se ejecutará solo una vez\r\n        //pero hemos indicado que se ejecute la primera vez y cuando cambie de valor category\r\n    }, [ category ]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  const [categories, setcategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball'])\n\n  // const handleAdd = () => {\n  //   setcategories(cats => [...cats, 'HunterXHunter']);\n  // }\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setcategories={setcategories}/>\n\n      {/* <button onClick={handleAdd}>Agregar</button> */}\n      \n      <ol>\n        {\n          categories.map((category, i) =>\n            <GifGrid key={ category } category={category} />\n          )\n        }\n      </ol>\n    </>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}